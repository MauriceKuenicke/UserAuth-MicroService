{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> A user authentication microservice implementation </p> <p> </p> <p>Documentation: https://mauricekuenicke.github.io/calypso/</p> <p>Source Code: https://github.com/MauriceKuenicke/calypso</p> <p> A moon of Saturn named after the nymph who held Odysseus captive on her island in Greek mythology. Most famously known for her role in Homer's epic poem \"The Odyssey.\" When the Greek hero Odysseus became stranded on her island after a shipwreck, Calypso fell in love with him and kept him as her captive for seven years, promising him immortality and eternal youth if he stayed with her. Calypso is often seen as a symbol of temptation and the dangers of the sea, and her story is frequently retold in literature, music, and art. - chatGPT</p> <p>Securely manage user authentication with a simple API interface. Lightweight, scalable, and customizable for small to medium-sized apps. Integrate with ease and free your application from complex authentication frameworks.</p>"},{"location":"#important","title":"\u26a0\ufe0f Important","text":"<p>This project is currently not safe for use in a production environment. Use at your own risk.</p>"},{"location":"cli/","title":"Calypso CLI","text":""},{"location":"development/environment/","title":"Setting Up The Development Environment","text":"<p>This guide assumes that all the main tools are already installed. This includes:</p> <ul> <li>Git</li> <li>Python</li> <li>Poetry</li> <li>NPM</li> <li>Docker</li> </ul>"},{"location":"development/environment/#install-dependencies","title":"Install Dependencies","text":"<p>The source code is managed with Poetry. A simple <pre><code>poetry install\n</code></pre> should be enough to install all the necessary dependencies, including the Calypso CLI! You should also make sure that all the necessary Frontend dependencies are installed. This can be achieved by going into the static directory <code>calypso/static/calypso/</code>. Here, you should find a Vue.js project based on Vite and managed with npm. Run  <pre><code>npm install\n</code></pre> inside this directory to install all the necessary node modules.</p>"},{"location":"development/environment/#setting-up-a-local-database","title":"Setting Up A Local Database","text":""},{"location":"development/environment/#docker-postgres-database","title":"Docker Postgres Database","text":"<p>You can run a local Postgres database using Docker. All you need is Docker installed + the latest official Postgres image. <pre><code>docker run --name CalypsoDB -e POSTGRES_PASSWORD=admin -e POSTGRES_DB=calypso -e POSTGRES_USER=admin -p 5432:5432 -d postgres\n</code></pre> Copying the command above will create a container named <code>CalypsoDB</code> with a Postgres instance running on it. A database with the name <code>calypso</code> will be created, as well, as a  root admin account for the database access. The username will be <code>admin</code> and the password will be <code>admin</code>. You can change this by adjusting the values in the docker run command. The container also exposes the port number <code>5432</code> which will be mapped to the host port <code>5432</code>. This way, you can connect to the database locally via <code>localhost:5432</code>. These default values are also used as defaults in the configuration of the Calypso server.</p>"},{"location":"development/environment/#schema-migrations","title":"Schema Migrations","text":"<p>You will need to migrate all the database tables into your newly created Postgres instance. The database models are managed by Alembic, so all the changes to the database models are are applied using revision files. You can bring your database to the latest version by running <pre><code>alembic upgrade head\n</code></pre> from inside the <code>calypso/alembic</code> directory.</p>"},{"location":"development/environment/#using-the-calypso-cli","title":"Using The Calypso CLI","text":"<p>With all the dependencies installed and a running Postgres instance, we are now ready to start the development server. Calypso ships with an integrated CLI tool to make some interactions with the server easier. One of the features is starting the complete service using a single command.</p> <p><pre><code>calypso run dev\n</code></pre> This will run the backendserver on port 8000. This backend server will serve the frontend located under <code>static/calypso/dist</code>. This is the code generated by the last <code>npm run generate</code> statement and not the development version. Please be aware that another Vite server will be active on port 3000 with the actual development code for the frontend.</p>"},{"location":"development/pre-commit-hooks/","title":"Pre-Commit Hooks","text":""},{"location":"development/pre-commit-hooks/#introduction","title":"Introduction","text":"<p>Pre-commit hooks are scripts that are run before a commit is made in a version control system. These hooks can be used to perform a variety of tasks, such as linting code, formatting code, and running tests, among others. The purpose of this page is to guide you through the process of setting up pre-commit hooks for this project.</p>"},{"location":"development/pre-commit-hooks/#installing-pre-commit","title":"Installing Pre-Commit","text":"<p>The first step is to install pre-commit. You can install pre-commit using pip. To install pre-commit, run the following command:</p> <pre><code>pip install pre-commit\n</code></pre>"},{"location":"development/pre-commit-hooks/#pre-commit-configuration-file","title":"Pre-commit Configuration File","text":"<p>The project contains a configuration file named <code>.pre-commit-config.yaml</code> in the root directory. This file contains the tools and basic configurations for them that will be used when running the hooks. Following hooks are currently being used:</p> <ul> <li> black</li> <li> flake8</li> <li> isort</li> <li> mypy</li> <li> pydocstyle</li> <li> check-yaml</li> </ul>"},{"location":"development/pre-commit-hooks/#installing-pre-commit-hooks","title":"Installing Pre-commit Hooks","text":"<pre><code>pre-commit install\n</code></pre> <p>This command will install the hooks specified in the pre-commit configuration file. Whenever you make a commit, pre-commit will run the specified hooks before allowing the commit to proceed.</p>"}]}